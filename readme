# Sistema de GestiÃ³n de Empleados

## ðŸ“Œ Ejercicio: Sistema de GestiÃ³n de Empleados

### ðŸ“‹ Objetivo
Crear un sistema para gestionar diferentes tipos de empleados en una empresa, teniendo en cuenta su salario, cargo y otros factores especÃ­ficos.

---

## ðŸ“Œ Requisitos

### ðŸ“Œ Clase Abstracta `Empleado`
Debe incluir:
- **Atributos privados**: `nombre`, `edad`, `salarioBase`.
- **Constructor** para inicializar los valores (con validaciones de edad y salario).
- **MÃ©todos getter/setter** para los atributos.
- **MÃ©todo abstracto `calcularSalario()`** para que cada tipo de empleado lo implemente a su manera.
- **MÃ©todo `mostrarInfo()`** que muestre los datos generales del empleado.

### ðŸ“Œ Subclases de `Empleado`
- **`Gerente`**:
  - Atributo adicional `bono`.
  - Su salario total es `salarioBase + bono`.
- **`Desarrollador`**:
  - Atributo adicional `horasExtra`.
  - Su salario total es `salarioBase + (horasExtra * 20â‚¬)`.

### ðŸ“Œ Interfaz `TrabajadorRemoto`
- Debe contener el mÃ©todo `conectarseRemotamente()`.

### ðŸ“Œ Clase `DesarrolladorRemoto`
- Debe **heredar de `Desarrollador`** e **implementar `TrabajadorRemoto`**.

---

## ðŸ“Œ Manejo de Excepciones
- Si la edad del empleado es **menor de 18 aÃ±os**, lanzar una excepciÃ³n `IllegalArgumentException`.
- Si el `salarioBase` es **menor a 1000â‚¬**, lanzar una excepciÃ³n `IllegalArgumentException`.
- Si un `DesarrolladorRemoto` **intenta conectarse sin internet**, lanzar una excepciÃ³n personalizada `ConexionException`.

---

## ðŸš€ ImplementaciÃ³n en `main()`
1. Crear una **lista de empleados** con diferentes tipos (`Gerente`, `Desarrollador`, `DesarrolladorRemoto`).
2. Recorrer la lista y **mostrar la informaciÃ³n de cada empleado**.

---

## ðŸ›  TecnologÃ­as y Herramientas
- Lenguaje: **Java**
- Paradigma: **ProgramaciÃ³n Orientada a Objetos (POO)**

---

## ðŸ“œ Licencia
Este proyecto estÃ¡ bajo la licencia MIT.

---

## ðŸ“ž Contacto
Para dudas o mejoras, contÃ¡ctame en [tu email o perfil de GitHub].

